/**
 * 指针数组，存的都是指针。
 * 而指向数组的指针是另外一回事
 * 第一个例子是指针数组
 * 第二个例子是指针指向一个数组。
 * */
#include<iostream>
#include<string>
using namespace std;

int main()
{
	int lin1[] = {1,0,0};
	int lin2[] = {0,1,0};
	int lin3[] = {0,0,1};
	
	
	int *pline[] = {lin1, lin2, lin3};
	
	for(int i=0;i<3;i++){
		for(int j=0;j<3;j++)
			cout<<pline[i][j]<<" ";
		cout<<endl;
	}
	
	//指向数组的指针；
	cout<<endl;
	int b[] = {0,1,2,3,4,5};
	int *p = b;
	for (int i =0;i!=6;++i)
		cout<<*(p+i)<<" ";
	return 0;	
}


/*这个例题对于理解数组指针和指针数组来说很重要*/
// #include<iostream>
// using namespace std;

// int main()
// {
    // int m[3][5]={14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};

    // int (*p)[5];//数组指针,理解为指向数组的指针，指向一维数组,亦称行指针，
	            // //每个一维数组有[n]个元素
				// //其中n值要求与二维数组的列一致
    // int i,j;
    // int *q[3];//指针数组， q是数组，数组元素是指针，3个int指针，记住行首地址即可

    // p=m;		//p是指针，可以直接指向二维数组
    // cout<<"-------------------1、数组指针第一种输出元素：常见的p[i][j]--------------\n";
    // for(i=0;i<3;i++)
    // {
        // for(j=0;j<5;j++) 
        // {
            // cout<<*((*p+i)+j)<<" ";    //这种不可以，他是列的形式
            // // cout<<*(*(p+i)+j)<<" ";    //注意元素值的取值方式
            // // cout<<p[i][j]<<" ";    //注意元素值的取值方式
        // }
        // cout<<"\n";
    // }
    // cout<<"\n------------------2、数组指针的第二种遍历方式:----------------------\n";
    // for(i=0;i<3;i++,p++)				//p可看成是行指针,取值方式类似*(*(p+i)+j))
    // {
        // cout<<"*(p+1): "<<*(p+1)<<endl;	
		// cout<<"**(p+1): "<<**(p+1)<<"\n";		
        // cout<<"*p+1: "<<*p+1<<"\n";				
        // cout<<"*(p*+1): "<<*(*p+1)<<"\n";				
        // // cout<<*p+2<<" ";				//每一行的第一个元素
        // // cout<<*p+3<<" ";				//每一行的第一个元素
        // // cout<<*p+4<<" ";				//每一行的第一个元素
        // // cout<<*(*p+1)<<" ";			//每一行的第二个元素
        // // cout<<*(*p+2)<<" ";			//每一行的第三个元素
        // // cout<<*(*p+3)<<" ";			//每一行的第四个元素
		// // cout<<*(*p+4)<<" ";			//每一行的第四个元素
        // cout<<"\n";
    // }

	// cout<<"\n------------------3、数组指针的第三种遍历方式---------------------：\n";
	// // cout<<*(*(p+i)+j)<<" "，以下代码很好的反映了*(p+1)和(*p+1)之间的区别，
	// //p直接就是行指针，*p+1其实是对应的是列的地址；
	// for(int (*p1)[5]=m;p1!=m+3;p1++)  
	// {	for(int *q1 = *p1;q1!=(*p1)+5;q1++)
			// cout<<*q1<<" ";
		// cout<<endl;
	// }
	
   
   
   
    // cout<<"\n-------------------指针数组输出元素第一种最常见的q[i][j]-------------\n";
	// //q是数组,里面的元素是指针即，元素q[i]是指针。
	// //初始化时将每个元素（指针）
	// //指向数组a每行元素的首地址即可
    // for(i=0;i<3;i++)
        // q[i]=m[i];	
    // for(i=0;i<3;i++)
    // {
        // for(j=0;j<5;j++)
        // {
            // cout<<q[i][j]<<" ";	//q[i][j]可换成*(q[i]+j)
        // }
        // cout<<"\n";
    // }
    // cout<<"\n-------------------------第二种遍历方式-----------------------------：\n";

    // // q[0]=m[0];			//记住第一行元素的首地址
    // *q=m[0];			//记住第一行元素的首地址
    // for(i=0;i<3;i++)
    // {
        // for(j=0;j<5;j++)
        // {
            // cout<<*(q[0]+5*i+j)<<" ";//首地址+第i行第j列元素的址，再取值即可
        // }
        // cout<<"\n";
    // }
    // cout<<"\n";
	
	// return 0;
// }





















































