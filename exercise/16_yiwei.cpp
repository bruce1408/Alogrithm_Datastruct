#include<iostream>
#include<vector>
using namespace std;
/**
 * 移位的情况，如果是负数那么移位其实就是向下取整；
 * -5 / 2 = -2，5 / 2 = 2。这表明除二是向零取整
 * -5 >> 1 = -3，5 >> 1 = 2。这表明右移一位是向下取整
 * -3>>1是多少呢？我们可以将其按照8位二进制展开
 * -3的8位二进制是1000 0011,负数在计算机中是以补码的形式存储的，所以还需要将其转换成补码
 * 1000 0011转换成反码 1111 1100(最高位符号位不动), 再加1转换成补码1111 1101
 * 接着将其右移1位，由于是有符号负整数，所以最高位补1，变为1111 1110
 * 接着将其还原成原码，1111 1110减1变反码1111 1101，接着反码取反变原码1000 0010,转换成十进制是-2，也就是说-3>>1得到的是-2
*/

int main()
{
    int a = -3;
    int b = a>>1;
    cout<<b<<" "<<a/2<<endl;
}
